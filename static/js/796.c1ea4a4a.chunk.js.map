{"version":3,"file":"static/js/796.c1ea4a4a.chunk.js","mappings":"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","sources":["components/Filter/Filter.jsx","../node_modules/@chakra-ui/layout/src/list.tsx","../node_modules/@chakra-ui/react-children-utils/dist/index.mjs","../node_modules/@chakra-ui/layout/src/link.tsx","components/ContactItem/ContactItem.jsx","redux/contacts/selectors.js","redux/filter/selectors.js","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.jsx","pages/Contacts.jsx"],"sourcesContent":["import { useDispatch } from 'react-redux';\nimport { setFilter } from '../../redux/filter/slice';\nimport { FormControl, Input } from '@chakra-ui/react';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  const handleChange = event => {\n    dispatch(setFilter(event.currentTarget.value.toLowerCase()));\n  };\n\n  return (\n    <>\n      <FormControl>\n        <Input\n          className=\"input\"\n          type=\"text\"\n          id=\"filter\"\n          placeholder=\"Filter contacts\"\n          onChange={handleChange}\n          width={320}\n        />\n      </FormControl>\n    </>\n  );\n};\n","import { Icon, IconProps } from \"@chakra-ui/icon\"\nimport { createContext } from \"@chakra-ui/react-context\"\nimport { getValidChildren } from \"@chakra-ui/react-children-utils\"\nimport type {\n  HTMLChakraProps,\n  SystemProps,\n  ThemingProps,\n} from \"@chakra-ui/system\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  SystemStyleObject,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\n\nconst [ListStylesProvider, useListStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `ListStylesContext`,\n  errorMessage: `useListStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<List />\" `,\n})\n\nexport { useListStyles }\n\ninterface ListOptions {\n  /**\n   * Shorthand prop for `listStyleType`\n   * @type SystemProps[\"listStyleType\"]\n   */\n  styleType?: SystemProps[\"listStyleType\"]\n  /**\n   * Shorthand prop for `listStylePosition`\n   * @type SystemProps[\"listStylePosition\"]\n   */\n  stylePosition?: SystemProps[\"listStylePosition\"]\n  /**\n   * The space between each list item\n   * @type SystemProps[\"margin\"]\n   */\n  spacing?: SystemProps[\"margin\"]\n}\n\nexport interface ListProps\n  extends HTMLChakraProps<\"ul\">,\n    ThemingProps<\"List\">,\n    ListOptions {}\n\n/**\n * List is used to display list items, it renders a `<ul>` by default.\n *\n * @see Docs https://chakra-ui.com/list\n */\nexport const List = forwardRef<ListProps, \"ul\">(function List(props, ref) {\n  const styles = useMultiStyleConfig(\"List\", props)\n  const {\n    children,\n    styleType = \"none\",\n    stylePosition,\n    spacing,\n    ...rest\n  } = omitThemingProps(props)\n\n  const validChildren = getValidChildren(children)\n\n  const selector = \"& > *:not(style) ~ *:not(style)\"\n\n  const spacingStyle = spacing ? { [selector]: { mt: spacing } } : {}\n\n  return (\n    <ListStylesProvider value={styles}>\n      <chakra.ul\n        ref={ref}\n        listStyleType={styleType}\n        listStylePosition={stylePosition}\n        /**\n         * We added this role to fix the Safari accessibility issue with list-style-type: none\n         * @see https://www.scottohara.me/blog/2019/01/12/lists-and-safari.html\n         */\n        role=\"list\"\n        __css={{ ...styles.container, ...spacingStyle }}\n        {...rest}\n      >\n        {validChildren}\n      </chakra.ul>\n    </ListStylesProvider>\n  )\n})\n\nList.displayName = \"List\"\n\nexport const OrderedList = forwardRef<ListProps, \"ol\">((props, ref) => {\n  const { as, ...rest } = props\n  return (\n    <List ref={ref} as=\"ol\" styleType=\"decimal\" marginStart=\"1em\" {...rest} />\n  )\n})\n\nOrderedList.displayName = \"OrderedList\"\n\nexport const UnorderedList = forwardRef<ListProps, \"ul\">(function UnorderedList(\n  props,\n  ref,\n) {\n  const { as, ...rest } = props\n  return (\n    <List ref={ref} as=\"ul\" styleType=\"initial\" marginStart=\"1em\" {...rest} />\n  )\n})\n\nUnorderedList.displayName = \"UnorderedList\"\n\nexport interface ListItemProps extends HTMLChakraProps<\"li\"> {}\n\n/**\n * ListItem\n *\n * Used to render a list item\n */\nexport const ListItem = forwardRef<ListItemProps, \"li\">(function ListItem(\n  props,\n  ref,\n) {\n  const styles = useListStyles()\n\n  return <chakra.li ref={ref} {...props} __css={styles.item} />\n})\n\nListItem.displayName = \"ListItem\"\n\n/**\n * ListIcon\n *\n * Used to render an icon beside the list item text\n */\nexport const ListIcon = forwardRef<IconProps, \"svg\">(function ListIcon(\n  props,\n  ref,\n) {\n  const styles = useListStyles()\n\n  return <Icon ref={ref} role=\"presentation\" {...props} __css={styles.icon} />\n})\n\nListIcon.displayName = \"ListIcon\"\n","// src/index.ts\nimport { Children, isValidElement } from \"react\";\nfunction getValidChildren(children) {\n  return Children.toArray(children).filter(\n    (child) => isValidElement(child)\n  );\n}\nexport {\n  getValidChildren\n};\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\nexport interface LinkProps extends HTMLChakraProps<\"a\">, ThemingProps<\"Link\"> {\n  /**\n   *  If `true`, the link will open in new tab\n   *\n   * @default false\n   */\n  isExternal?: boolean\n}\n\n/**\n * Links are accessible elements used primarily for navigation.\n *\n * It integrates well with other routing libraries like\n * React Router, Reach Router and Next.js Link.\n *\n * @example\n *\n * ```jsx\n * <Link as={ReactRouterLink} to=\"/home\">Home</Link>\n * ```\n *\n * @see Docs https://chakra-ui.com/link\n */\nexport const Link = forwardRef<LinkProps, \"a\">(function Link(props, ref) {\n  const styles = useStyleConfig(\"Link\", props)\n  const { className, isExternal, ...rest } = omitThemingProps(props)\n\n  return (\n    <chakra.a\n      target={isExternal ? \"_blank\" : undefined}\n      rel={isExternal ? \"noopener\" : undefined}\n      ref={ref}\n      className={cx(\"chakra-link\", className)}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nLink.displayName = \"Link\"\n","import './ContactItem.module.css';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from '../../redux/contacts/operations';\nimport PropTypes from 'prop-types';\nimport { ListItem, Link } from '@chakra-ui/react';\n\nexport const ContactItem = ({ contact }) => {\n  const dispatch = useDispatch();\n  const handleDelete = () => dispatch(deleteContact(contact.id));\n\n  return (\n    <ListItem>\n      <div>\n        <p>\n          {contact.name}: {contact.number}\n        </p>\n        <Link onClick={handleDelete}>Delete</Link>\n      </div>\n    </ListItem>\n  );\n};\n\nContactItem.propTypes = {\n  contact: PropTypes.object,\n};\n","export const selectLoading = state => state.contacts.isLoading;\n\nexport const selectAllContacts = state => state.contacts.items;\n\nexport const selectError = state => state.contacts.error;\n","import { createSelector } from '@reduxjs/toolkit';\nimport { selectAllContacts } from '../contacts/selectors';\nexport const selectFilterText = state => state.filter.text;\n\nexport const selectFilteredContacts = createSelector(\n  [selectAllContacts, selectFilterText],\n  (contacts, filterText) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filterText)\n    );\n  }\n);\n","import { ContactItem } from '../ContactItem/ContactItem';\nimport './ContactList.module.css';\nimport { useSelector } from 'react-redux';\nimport { selectFilteredContacts } from '../../redux/filter/selectors';\nimport { UnorderedList } from '@chakra-ui/react';\n\nexport const ContactList = () => {\n  const filteredContacts = useSelector(selectFilteredContacts);\n\n  return (\n    <UnorderedList>\n      {filteredContacts.map(contact => {\n        return <ContactItem key={contact.id} contact={contact} />;\n      })}\n    </UnorderedList>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from '../../redux/contacts/operations';\nimport { selectAllContacts } from '../../redux/contacts/selectors';\nimport { FormControl, FormLabel, Button, Input } from '@chakra-ui/react';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectAllContacts);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const form = event.target;\n    if (\n      contacts\n        .map(contact => contact.name.toLowerCase())\n        .includes(form.elements.name.value.toLowerCase())\n    ) {\n      alert(`${form.elements.name.value} is already in contacts.`);\n      form.reset();\n      return;\n    }\n    dispatch(\n      addContact({\n        name: form.elements.name.value,\n        number: form.elements.number.value,\n      })\n    );\n    form.reset();\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <FormControl>\n        <FormLabel htmlFor=\"name\">Name</FormLabel>\n        <Input\n          type=\"text\"\n          id=\"name\"\n          pattern=\"^[a-zA-Z]+(([' \\-][a-zA-Z ])?[a-zA-Z]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          autoComplete=\"true\"\n        />\n      </FormControl>\n\n      <FormControl>\n        <FormLabel htmlFor=\"number\">Number</FormLabel>\n        <Input\n          type=\"tel\"\n          id=\"number\"\n          pattern=\"\\+?\\d{1,4}?[\\-.\\s]?\\(?\\d{1,3}?\\)?[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </FormControl>\n\n      <Button colorScheme=\"blackAlpha\" width=\"30\" mt={4} type=\"submit\">\n        Add contact\n      </Button>\n      {/* <label htmlFor=\"name\">Name</label>\n      <input\n        type=\"text\"\n        id=\"name\"\n        pattern=\"^[a-zA-Z]+(([' \\-][a-zA-Z ])?[a-zA-Z]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        autoComplete=\"true\"\n      />\n      <label htmlFor=\"number\">Number</label>\n      <input\n        type=\"tel\"\n        id=\"number\"\n        pattern=\"\\+?\\d{1,4}?[\\-.\\s]?\\(?\\d{1,3}?\\)?[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n      />\n\n      <button type=\"submit\">Add contact</button> */}\n    </form>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { Filter } from '../components/Filter/Filter';\nimport { ContactList } from '../components/ContactList/ContactList';\nimport { ContactForm } from '../components/ContactForm/ContactForm';\nimport { fetchContacts } from '../redux/contacts/operations';\nimport { selectLoading, selectError } from '../redux/contacts/selectors';\nimport { Loader } from '../components/Loader/Loader';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <div className=\"bodyContainer\">\n        <ContactForm />\n        <Filter />\n        <div>{isLoading && !error && <Loader />}</div>\n        <ContactList />\n      </div>\n    </>\n  );\n}\n"],"names":["Filter","dispatch","useDispatch","_jsx","_Fragment","children","FormControl","Input","className","type","id","placeholder","onChange","event","setFilter","currentTarget","value","toLowerCase","width","createContext","name","errorMessage","_createContext2","ListStylesProvider","useListStyles","List","forwardRef","props","ref","styles","useMultiStyleConfig","omitThemingProps","_omitThemingProps$sty","styleType","stylePosition","spacing","rest","validChildren","Children","filter","child","isValidElement","getValidChildren","spacingStyle","mt","chakra","ul","listStyleType","listStylePosition","role","__css","container","displayName","as","marginStart","UnorderedList","ListItem","li","item","Icon","icon","Link","useStyleConfig","isExternal","a","target","rel","cx","ContactItem","_ref","contact","_jsxs","number","onClick","deleteContact","selectLoading","state","contacts","isLoading","selectAllContacts","items","selectError","error","selectFilteredContacts","createSelector","text","filterText","includes","ContactList","filteredContacts","useSelector","map","ContactForm","onSubmit","preventDefault","form","elements","alert","concat","reset","addContact","FormLabel","htmlFor","pattern","title","required","autoComplete","Button","colorScheme","Contacts","useEffect","fetchContacts","Helmet","Loader"],"sourceRoot":""}